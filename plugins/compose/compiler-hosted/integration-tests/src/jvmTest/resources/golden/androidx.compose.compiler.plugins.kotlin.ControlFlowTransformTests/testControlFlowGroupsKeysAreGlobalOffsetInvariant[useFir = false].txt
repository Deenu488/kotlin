//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable fun Foo() {
    Bar(true)
}

@Composable fun Bar(test: Boolean) {
    if(test) {
        Box()
    } else {
        Box2()
    }
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun Foo(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Foo)<Bar(tr...>:Test.kt")
  if (%changed != 0 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    Bar(true, %composer, 0b0110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Foo(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Composable
fun Bar(test: Boolean, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Bar):Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(test)) 0b0100 else 0b0010
  }
  if (%dirty and 0b0011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    if (test) {
      %composer.startReplaceGroup(<>)
      sourceInformation(%composer, "<Box()>")
      Box(%composer, 0)
      %composer.endReplaceGroup()
    } else {
      %composer.startReplaceGroup(<>)
      sourceInformation(%composer, "<Box2()>")
      Box2(%composer, 0)
      %composer.endReplaceGroup()
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Bar(test, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
