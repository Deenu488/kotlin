FILE: weakHashMap.kt
    public final val someMap: R|java/util/WeakHashMap<ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin/Any?, relevantFeature=ForbidTypePreservingFlexibilityWriteInferenceHack) kotlin/Any?, ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin/Any?, relevantFeature=ForbidTypePreservingFlexibilityWriteInferenceHack) kotlin/Any?>| = R|java/util/WeakHashMap.WeakHashMap|<R|ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin/Any?, relevantFeature=JavaTypeParameterDefaultRepresentationWithDNN) kotlin/Any!|, R|ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin/Any?, relevantFeature=JavaTypeParameterDefaultRepresentationWithDNN) kotlin/Any!|>()
        public get(): R|java/util/WeakHashMap<ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin/Any?, relevantFeature=ForbidTypePreservingFlexibilityWriteInferenceHack) kotlin/Any?, ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin/Any?, relevantFeature=ForbidTypePreservingFlexibilityWriteInferenceHack) kotlin/Any?>|
    public final fun foo(): R|kotlin/Unit| {
        R|/someMap|.R|SubstitutionOverride<java/util/WeakHashMap.get: R|@EnhancedNullability ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin/Any?, relevantFeature=ForbidTypePreservingFlexibilityWriteInferenceHack) kotlin/Any?|>|(String())
    }
