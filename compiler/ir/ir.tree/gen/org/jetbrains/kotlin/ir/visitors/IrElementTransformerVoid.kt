/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

// This file was generated automatically. See compiler/ir/ir.tree/tree-generator/ReadMe.md.
// DO NOT MODIFY IT MANUALLY.

package org.jetbrains.kotlin.ir.visitors

import org.jetbrains.kotlin.ir.IrStatement
import org.jetbrains.kotlin.ir.declarations.*
import org.jetbrains.kotlin.ir.expressions.*

/**
 * Auto-generated by [org.jetbrains.kotlin.ir.generator.print.TransformerVoidPrinter]
 */
abstract class IrElementTransformerVoid : IrLeafTransformerVoid() {

    open fun visitDeclaration(declaration: IrDeclarationBase): IrStatement =
        transformElement(declaration)

    override fun visitValueParameter(declaration: IrValueParameter): IrStatement =
        visitDeclaration(declaration)

    override fun visitClass(declaration: IrClass): IrStatement =
        visitDeclaration(declaration)

    override fun visitAnonymousInitializer(declaration: IrAnonymousInitializer): IrStatement =
        visitDeclaration(declaration)

    override fun visitTypeParameter(declaration: IrTypeParameter): IrStatement =
        visitDeclaration(declaration)

    open fun visitFunction(declaration: IrFunction): IrStatement =
        visitDeclaration(declaration)

    override fun visitConstructor(declaration: IrConstructor): IrStatement =
        visitFunction(declaration)

    override fun visitEnumEntry(declaration: IrEnumEntry): IrStatement =
        visitDeclaration(declaration)

    override fun visitErrorDeclaration(declaration: IrErrorDeclaration): IrStatement =
        visitDeclaration(declaration)

    override fun visitField(declaration: IrField): IrStatement =
        visitDeclaration(declaration)

    override fun visitLocalDelegatedProperty(declaration: IrLocalDelegatedProperty): IrStatement =
        visitDeclaration(declaration)

    override fun visitModuleFragment(declaration: IrModuleFragment): IrModuleFragment =
        transformElement(declaration)

    override fun visitProperty(declaration: IrProperty): IrStatement =
        visitDeclaration(declaration)

    override fun visitScript(declaration: IrScript): IrStatement =
        visitDeclaration(declaration)

    override fun visitSimpleFunction(declaration: IrSimpleFunction): IrStatement =
        visitFunction(declaration)

    override fun visitTypeAlias(declaration: IrTypeAlias): IrStatement =
        visitDeclaration(declaration)

    override fun visitVariable(declaration: IrVariable): IrStatement =
        visitDeclaration(declaration)

    open fun visitPackageFragment(declaration: IrPackageFragment): IrPackageFragment =
        transformElement(declaration)

    override fun visitExternalPackageFragment(declaration: IrExternalPackageFragment): IrExternalPackageFragment =
        visitPackageFragment(declaration) as IrExternalPackageFragment

    override fun visitFile(declaration: IrFile): IrFile =
        visitPackageFragment(declaration) as IrFile

    open fun visitExpression(expression: IrExpression): IrExpression =
        transformElement(expression)

    open fun visitBody(body: IrBody): IrBody =
        transformElement(body)

    override fun visitExpressionBody(body: IrExpressionBody): IrBody =
        visitBody(body)

    override fun visitBlockBody(body: IrBlockBody): IrBody =
        visitBody(body)

    open fun visitDeclarationReference(expression: IrDeclarationReference): IrExpression =
        visitExpression(expression)

    open fun visitMemberAccess(expression: IrMemberAccessExpression<*>): IrExpression =
        visitDeclarationReference(expression)

    open fun visitFunctionAccess(expression: IrFunctionAccessExpression): IrExpression =
        visitMemberAccess(expression)

    override fun visitConstructorCall(expression: IrConstructorCall): IrExpression =
        visitFunctionAccess(expression)

    open fun visitSingletonReference(expression: IrGetSingletonValue): IrExpression =
        visitDeclarationReference(expression)

    override fun visitGetObjectValue(expression: IrGetObjectValue): IrExpression =
        visitSingletonReference(expression)

    override fun visitGetEnumValue(expression: IrGetEnumValue): IrExpression =
        visitSingletonReference(expression)

    override fun visitRawFunctionReference(expression: IrRawFunctionReference): IrExpression =
        visitDeclarationReference(expression)

    open fun visitContainerExpression(expression: IrContainerExpression): IrExpression =
        visitExpression(expression)

    override fun visitBlock(expression: IrBlock): IrExpression =
        visitContainerExpression(expression)

    override fun visitComposite(expression: IrComposite): IrExpression =
        visitContainerExpression(expression)

    override fun visitReturnableBlock(expression: IrReturnableBlock): IrExpression =
        visitBlock(expression)

    override fun visitInlinedFunctionBlock(inlinedBlock: IrInlinedFunctionBlock): IrExpression =
        visitBlock(inlinedBlock)

    override fun visitSyntheticBody(body: IrSyntheticBody): IrBody =
        visitBody(body)

    open fun visitBreakContinue(jump: IrBreakContinue): IrExpression =
        visitExpression(jump)

    override fun visitBreak(jump: IrBreak): IrExpression =
        visitBreakContinue(jump)

    override fun visitContinue(jump: IrContinue): IrExpression =
        visitBreakContinue(jump)

    override fun visitCall(expression: IrCall): IrExpression =
        visitFunctionAccess(expression)

    open fun visitCallableReference(expression: IrCallableReference<*>): IrExpression =
        visitMemberAccess(expression)

    override fun visitFunctionReference(expression: IrFunctionReference): IrExpression =
        visitCallableReference(expression)

    override fun visitPropertyReference(expression: IrPropertyReference): IrExpression =
        visitCallableReference(expression)

    override fun visitLocalDelegatedPropertyReference(expression: IrLocalDelegatedPropertyReference): IrExpression =
        visitCallableReference(expression)

    override fun visitRichFunctionReference(expression: IrRichFunctionReference): IrExpression =
        visitExpression(expression)

    override fun visitRichPropertyReference(expression: IrRichPropertyReference): IrExpression =
        visitExpression(expression)

    override fun visitClassReference(expression: IrClassReference): IrExpression =
        visitDeclarationReference(expression)

    override fun visitConst(expression: IrConst): IrExpression =
        visitExpression(expression)

    open fun visitConstantValue(expression: IrConstantValue): IrConstantValue =
        transformElement(expression)

    override fun visitConstantPrimitive(expression: IrConstantPrimitive): IrConstantValue =
        visitConstantValue(expression)

    override fun visitConstantObject(expression: IrConstantObject): IrConstantValue =
        visitConstantValue(expression)

    override fun visitConstantArray(expression: IrConstantArray): IrConstantValue =
        visitConstantValue(expression)

    override fun visitDelegatingConstructorCall(expression: IrDelegatingConstructorCall): IrExpression =
        visitFunctionAccess(expression)

    open fun visitDynamicExpression(expression: IrDynamicExpression): IrExpression =
        visitExpression(expression)

    override fun visitDynamicOperatorExpression(expression: IrDynamicOperatorExpression): IrExpression =
        visitDynamicExpression(expression)

    override fun visitDynamicMemberExpression(expression: IrDynamicMemberExpression): IrExpression =
        visitDynamicExpression(expression)

    override fun visitEnumConstructorCall(expression: IrEnumConstructorCall): IrExpression =
        visitFunctionAccess(expression)

    override fun visitErrorExpression(expression: IrErrorExpression): IrExpression =
        visitExpression(expression)

    override fun visitErrorCallExpression(expression: IrErrorCallExpression): IrExpression =
        visitErrorExpression(expression)

    open fun visitFieldAccess(expression: IrFieldAccessExpression): IrExpression =
        visitDeclarationReference(expression)

    override fun visitGetField(expression: IrGetField): IrExpression =
        visitFieldAccess(expression)

    override fun visitSetField(expression: IrSetField): IrExpression =
        visitFieldAccess(expression)

    override fun visitFunctionExpression(expression: IrFunctionExpression): IrExpression =
        visitExpression(expression)

    override fun visitGetClass(expression: IrGetClass): IrExpression =
        visitExpression(expression)

    override fun visitInstanceInitializerCall(expression: IrInstanceInitializerCall): IrExpression =
        visitExpression(expression)

    open fun visitLoop(loop: IrLoop): IrExpression =
        visitExpression(loop)

    override fun visitWhileLoop(loop: IrWhileLoop): IrExpression =
        visitLoop(loop)

    override fun visitDoWhileLoop(loop: IrDoWhileLoop): IrExpression =
        visitLoop(loop)

    override fun visitReturn(expression: IrReturn): IrExpression =
        visitExpression(expression)

    override fun visitStringConcatenation(expression: IrStringConcatenation): IrExpression =
        visitExpression(expression)

    override fun visitSuspensionPoint(expression: IrSuspensionPoint): IrExpression =
        visitExpression(expression)

    override fun visitSuspendableExpression(expression: IrSuspendableExpression): IrExpression =
        visitExpression(expression)

    override fun visitThrow(expression: IrThrow): IrExpression =
        visitExpression(expression)

    override fun visitTry(aTry: IrTry): IrExpression =
        visitExpression(aTry)

    override fun visitCatch(aCatch: IrCatch): IrCatch =
        transformElement(aCatch)

    override fun visitTypeOperator(expression: IrTypeOperatorCall): IrExpression =
        visitExpression(expression)

    open fun visitValueAccess(expression: IrValueAccessExpression): IrExpression =
        visitDeclarationReference(expression)

    override fun visitGetValue(expression: IrGetValue): IrExpression =
        visitValueAccess(expression)

    override fun visitSetValue(expression: IrSetValue): IrExpression =
        visitValueAccess(expression)

    override fun visitVararg(expression: IrVararg): IrExpression =
        visitExpression(expression)

    override fun visitSpreadElement(spread: IrSpreadElement): IrSpreadElement =
        transformElement(spread)

    override fun visitWhen(expression: IrWhen): IrExpression =
        visitExpression(expression)

    override fun visitBranch(branch: IrBranch): IrBranch =
        transformElement(branch)

    override fun visitElseBranch(branch: IrElseBranch): IrElseBranch =
        transformElement(branch)
}
